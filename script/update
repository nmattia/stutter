#!/usr/bin/env nix-shell
#!nix-shell -i bash
#!nix-shell --keep GITHUB_TOKEN
#!nix-shell -p bash nix curl jq git gitAndTools.hub
# vim: filetype=sh
set -euo pipefail

banner() {
    echo
    echo "--- $*"
    echo
}

create_pr() {
    git checkout -b update
    git commit -am "Update dependencies"
    hub pull-request -m "Update dependencies" --push
}

update() {
    local versions="$1"
    local package="$2"
    echo "Versions file: $versions"
    echo "Package to update: $package"
    local owner=$(cat $versions | jq -r ".[\"$package\"].owner")
    local repo=$(cat $versions | jq -r ".[\"$package\"].repo")
    local branch=$(cat $versions | jq -r ".[\"$package\"].branch")
    local rev=$(cat $versions | jq -r ".[\"$package\"].rev")
    local sha256=$(cat $versions | jq -r ".[\"$package\"].sha256")

    echo "Owner: $owner"
    echo "Repository: $repo"
    echo "Branch: $branch"


    local new_rev=$(curl -sfL \
        https://api.github.com/repos/$owner/$repo/git/refs/heads/$branch \
        | jq -r .object.sha)
    echo "The following revision will be used:"
    echo "  $new_rev"

    local url=https://github.com/$owner/$repo/archive/$new_rev.tar.gz
    local new_sha256=$(nix-prefetch-url --unpack "$url")

    echo "The following url will be used:"
    echo "  $url"

    echo "The following sha256 will be used:"
    echo "  $new_sha256"

    res=$(cat $versions \
        | jq -rM ".[\"$package\"].rev = \"$new_rev\"" \
        | jq -rM ".[\"$package\"].sha256 = \"$new_sha256\""
        )

    echo "New versions file:"
    echo "$res"

    echo "$res" > $versions
}

DO_CREATE_PR=false

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --pr)
    DO_CREATE_PR="true"
    shift
    ;;
    *)
    >&2 echo "Could not parse argument: $key"
    exit 1
    ;;
esac
done

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. >/dev/null && pwd )"
VERSIONS_DEF="$ROOT/nix/versions.json"
PACKAGES_DEF="$(cat $VERSIONS_DEF | jq -r 'keys | .[]')"

VERSIONS="$VERSIONS_DEF"
echo "Using versions file ${VERSIONS}"

if [ $# -eq 0 ]
then
    PACKAGES="$PACKAGES_DEF"
else
    PACKAGES="$1"
fi

echo "Using packages:"
for p in $PACKAGES; do echo " - $p"; done

for p in $PACKAGES; do
    banner "$p"
    update "$VERSIONS" "$p"
done

if [ "$DO_CREATE_PR" == "true" ]; then
    echo "Creating PR"
    create_pr
else
    echo "not creating PR."
fi
